---
import Layout from '../layouts/Layout.astro';
import { PlaygroundCard } from '../components/PlaygroundCard.astro';
import { SearchBar } from '../components/SearchBar.astro';
import { FilterBar } from '../components/FilterBar.astro';

// Imports and data fetching
const response = await fetch('../data/london_playgrounds.json');
const playgrounds = await response.json();

// Get featured playgrounds (highest rated)
const featuredPlaygrounds = playgrounds
  .sort((a, b) => b.rating - a.rating)
  .slice(0, 6);

// Process playground data for the map and filtering
const processedPlaygrounds = playgrounds.map(playground => ({
  ...playground,
  // Determine area based on postal code or coordinates
  area: determineArea(playground.postal_code),
  // Extract amenities from description or subtypes
  amenities: extractAmenities(playground.description, playground.subtypes)
}));

function determineArea(postalCode) {
  if (!postalCode) return 'Unknown';
  const code = postalCode.toUpperCase();
  if (code.startsWith('N')) return 'North London';
  if (code.startsWith('S')) return 'South London';
  if (code.startsWith('E')) return 'East London';
  if (code.startsWith('W')) return 'West London';
  if (code.startsWith('WC') || code.startsWith('EC')) return 'Central London';
  return 'Other London';
}

function extractAmenities(description, subtypes) {
  const amenities = new Set();
  const searchText = `${description} ${subtypes}`.toLowerCase();
  
  // Common playground amenities to look for
  const amenityKeywords = {
    'swing': 'Swings',
    'slide': 'Slides',
    'climb': 'Climbing Frame',
    'sand': 'Sandbox',
    'water': 'Water Play',
    'seat': 'Seating Area',
    'toilet': 'Toilets',
    'parking': 'Parking'
  };

  Object.entries(amenityKeywords).forEach(([keyword, amenity]) => {
    if (searchText.includes(keyword)) {
      amenities.add(amenity);
    }
  });

  return Array.from(amenities);
}
---

<Layout title="London Playgrounds Directory">
  <!-- Hero Section -->
  <section class="relative bg-green-600 text-white py-20">
    <div class="container mx-auto px-4">
      <h1 class="text-4xl md:text-6xl font-bold text-center mb-6">
        Find the Perfect Playground
      </h1>
      <p class="text-xl text-center mb-8">
        Discover London's best playgrounds for your children
      </p>
      <SearchBar />
    </div>
  </section>

  <!-- Filter Section -->
  <section class="container mx-auto px-4 py-8">
    <FilterBar />
  </section>

  <!-- Playgrounds Grid -->
  <section class="container mx-auto px-4 py-8">
    <div id="playgrounds-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {processedPlaygrounds.map((playground) => (
        <PlaygroundCard playground={playground} />
      ))}
    </div>
  </section>

  <!-- Map Preview -->
  <section class="container mx-auto px-4 py-12">
    <h2 class="text-3xl font-bold mb-8">Explore by Location</h2>
    <div id="map" class="h-96 rounded-lg shadow-lg"></div>
  </section>

  <script define:vars={{ processedPlaygrounds }}>
    // Initialize map
    const map = L.map('map').setView([51.5074, -0.1278], 12);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    // Store markers for filtering
    const markers = new Map();

    // Add playground markers
    processedPlaygrounds.forEach(playground => {
      const marker = L.marker([playground.latitude, playground.longitude])
        .bindPopup(`
          <h3 class="font-bold">${playground.name}</h3>
          <p>${playground.street}</p>
          <a href="/playground/${playground.slug}" class="text-green-600 hover:underline">View Details</a>
        `)
        .addTo(map);
      markers.set(playground.name, marker);
    });

    // Handle filtering and sorting
    document.addEventListener('updatePlaygrounds', (e) => {
      const { sort, filters } = e.detail;
      
      // Filter playgrounds
      let filtered = processedPlaygrounds.filter(playground => {
        if (filters.length === 0) return true;
        
        return filters.some(filter => {
          // Check area
          if (playground.area === filter) return true;
          // Check age range
          if (playground.age_range && playground.age_range.includes(filter)) return true;
          // Check amenities
          if (playground.amenities && playground.amenities.includes(filter)) return true;
          return false;
        });
      });

      // Sort playgrounds
      filtered.sort((a, b) => {
        switch (sort) {
          case 'rating-desc':
            return b.rating - a.rating;
          case 'rating-asc':
            return a.rating - b.rating;
          case 'reviews-desc':
            return b.reviews - a.reviews;
          case 'name-asc':
            return a.name.localeCompare(b.name);
          case 'name-desc':
            return b.name.localeCompare(a.name);
          default:
            return 0;
        }
      });

      // Update grid
      const grid = document.getElementById('playgrounds-grid');
      grid.innerHTML = filtered.map(playground => `
        <article class="bg-white rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow">
          <div class="aspect-video bg-gray-200 relative">
            <img
              src="${playground.image || 'https://via.placeholder.com/400x300?text=Playground'}"
              alt="${playground.name}"
              class="w-full h-full object-cover"
            />
            ${playground.rating ? `
              <div class="absolute top-2 right-2 bg-white rounded-full px-2 py-1 text-sm font-bold text-green-600">
                ★ ${playground.rating.toFixed(1)}
              </div>
            ` : ''}
          </div>
          
          <div class="p-4">
            <h3 class="text-xl font-bold mb-2">${playground.name}</h3>
            <p class="text-gray-600 text-sm mb-3">${playground.street}</p>
            
            ${playground.description ? `
              <p class="text-gray-700 mb-4 line-clamp-2">
                ${playground.description}
              </p>
            ` : ''}
            
            <div class="flex items-center justify-between">
              <div class="text-sm text-gray-600">
                ${playground.reviews ? `${playground.reviews} reviews` : ''}
              </div>
              <a
                href="/playground/${playground.name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '')}"
                class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors"
              >
                View Details
              </a>
            </div>
          </div>
        </article>
      `).join('');

      // Update map markers
      processedPlaygrounds.forEach(playground => {
        const marker = markers.get(playground.name);
        if (filtered.includes(playground)) {
          marker.addTo(map);
        } else {
          marker.remove();
        }
      });
    });
  </script>
</Layout> 